# This config has been generated by the pocket_coffea CLI 0.9.4.
from pocket_coffea.utils.configurator import Configurator
from pocket_coffea.lib.cut_definition import Cut
from pocket_coffea.lib.cut_functions import (
    get_nObj_min,
    get_nObj_eq,
    get_HLTsel,
    get_nPVgood,
    goldenJson,
    eventFlags,
)
from pocket_coffea.parameters.cuts import passthrough
from pocket_coffea.parameters.histograms import *
from pocket_coffea.lib.categorization import (
    StandardSelection,
    CartesianSelection,
    MultiCut,
)
from pocket_coffea.lib.calibrators.common.common import JetsCalibrator,JetsPNetPtRegressionCalibrator

import workflow_dummy
from workflow_dummy import BasicProcessor

# Register custom modules in cloudpickle to propagate them to dask workers
import cloudpickle
import custom_cut_functions

cloudpickle.register_pickle_by_value(workflow_dummy)
cloudpickle.register_pickle_by_value(custom_cut_functions)

from custom_cut_functions import *
import os

localdir = os.path.dirname(os.path.abspath(__file__))

# Creating weights configuration
from pocket_coffea.lib.weights.common import common_weights

# Loading default parameters
from pocket_coffea.parameters import defaults

default_parameters = defaults.get_default_parameters()
defaults.register_configuration_dir("config_dir", localdir + "/params")

parameters = defaults.merge_parameters_from_files(
    default_parameters,
    f"{localdir}/params/object_preselection.yaml",
    f"{localdir}/params/triggers.yaml",
    update=True,
)

# Creating custom weight
from pocket_coffea.lib.weights.weights import WeightLambda
import numpy as np


cfg = Configurator(
    parameters=parameters,
    datasets={
        "jsons": ["datasets/datasets_cern.json"],
        "filter": {
            "samples": ["DYJetsToLL_M-50"],
            "samples_exclude": [],
            "year": ["2022_preEE"],
        },
    },
    workflow=BasicProcessor,
    skim=[],
    preselections=[passthrough],
    categories={
        "baseline": [passthrough],
    },
    weights={
        "common": {
            "inclusive": ["genWeight", "lumi", "XS"],
        },
        "bysample": {},
    },
    # Passing a list of WeightWrapper objects
    weights_classes=common_weights,
    calibrators=[JetsPNetPtRegressionCalibrator,JetsCalibrator],
    variations={
        "weights": {
            "common": {
                "inclusive": [],
            },
            "bysample": {},
        },
        "shape": {
            "common": {
                "inclusive": [],
            },
        },
    },
    variables={
        **count_hist("JetGood"),
    },
    columns={},
)
